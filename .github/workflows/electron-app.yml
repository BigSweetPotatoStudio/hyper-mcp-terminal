name: Hyper MCP Terminal Electron App

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write
  discussions: write

jobs:
  build-and-test:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python (for node-gyp)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python setuptools (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools

      - name: Install Python setuptools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools

      - name: Install Python setuptools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Build frontend
        run: npm run build:web

      - name: Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            dist/
            build/
          key: ${{ matrix.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-build-

      # 只在 Pull Request 时进行构建测试
      - name: Test electron build (Pull Request)
        if: github.event_name == 'pull_request'
        run: npm run electron:pack
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release Electron App
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python (for node-gyp)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python setuptools (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools

      - name: Install Python setuptools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools

      - name: Install Python setuptools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools

      - name: Install dependencies
        run: npm ci

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            dist/
            build/
          key: ${{ matrix.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-build-

      # macOS 需要代码签名
      - name: Build and publish (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run electron:build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 如果有代码签名证书，可以添加以下环境变量
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # Windows 和 Linux 构建
      - name: Build and publish (Windows/Linux)
        if: matrix.os != 'macos-latest'
        run: npm run electron:build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-${{ matrix.os }}
          path: |
            electron-dist/*.exe
            electron-dist/*.dmg
            electron-dist/*.AppImage
            electron-dist/*.deb
            electron-dist/*.rpm
            electron-dist/*.zip
            electron-dist/*.tar.gz
          retention-days: 30

  create-release:
    name: Create Release
    needs: release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get version from package.json
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Hyper MCP Terminal v${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          generate_release_notes: true
          files: |
            ./artifacts/**/*.exe
            ./artifacts/**/*.dmg  
            ./artifacts/**/*.AppImage
            ./artifacts/**/*.deb
            ./artifacts/**/*.rpm
            ./artifacts/**/*.zip
            ./artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}